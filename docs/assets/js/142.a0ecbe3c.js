(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{169:function(t,r,a){"use strict";a.r(r);var s=a(6),e=Object(s.a)({},function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"객체-지향-프로그래밍-용어-풀이"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#객체-지향-프로그래밍-용어-풀이","aria-hidden":"true"}},[t._v("#")]),t._v(" 객체 지향 프로그래밍 용어 풀이")]),t._v(" "),a("p",[t._v("대표적인 객체 지향 프로그래밍이 가능한 언어는 JavaScript 외에도 Java, C#, Ruby, Python, Objective-C 등이 있습니다.\n객체 지향 프로그래밍은 추상화(Abstraction)를 사용하여 모델을 만드는 프로그래밍입니다. 모듈성, 다형성 및 캡슐화를\n포함한 여러 기술을 사용합니다. 오늘날 많은 인기있는 프로그래밍 언어는 객체 지향 프로그래밍 (OOP)을 지원합니다.")]),t._v(" "),a("p",[t._v("객체 지향 프로그래밍은 전통적인 프로그래밍 방식과 비교하여, 서로 협력하는 관계를 형성하는 객체 모음을 가진\n소프트웨어 설계로 볼 수 있습니다. 이것은 기능 모음으로 보일 수도 있고 단순히 지침 목록으로 볼 수도 있습니다.")]),t._v(" "),a("p",[t._v("OOP에서 각 객체는 메시지를 수신하고 데이터를 처리하며 메시지를 다른 객체로 보낼 수 있습니다. 각 개체는\n별개의 역할이나 책임이 있는 독립적인 작은 컴퓨터로 볼 수 있습니다. 객체 지향 프로그래밍은 프로그래밍의\n유연성과 유지 보수성을 높이기위한 것이며 대규모 소프트웨어 프로그래밍에서 널리 사용됩니다.\n객체 지향 프로그래밍의 특징은 다음 용어로 정리할 수 있습니다.")]),t._v(" "),a("ul",[a("li",[a("strong",[a("span",{staticStyle:{color:"rgb(84, 141, 212)"}},[t._v("Class")])]),t._v(" -객체 속성(Properties)을 정의합니다. ( 예: 설계 도면 )")]),t._v(" "),a("li",[a("strong",[a("span",{staticStyle:{color:"rgb(84, 141, 212)"}},[t._v("Object")])]),t._v(" - Class의 인스턴스(Instance) 입니다. ( 예: 설계 도면을 통해 구현된 실제 제품 )")]),t._v(" "),a("li",[a("strong",[a("span",{staticStyle:{color:"rgb(84, 141, 212)"}},[t._v("Property")])]),t._v(" - 객체의 속성을 말합니다. ( 예: color 등과 같은 명사 형태 )")]),t._v(" "),a("li",[a("strong",[a("span",{staticStyle:{color:"rgb(84, 141, 212)"}},[t._v("Method")])]),t._v(" - 객체의 기능을 말합니다.( 예: walk() 등과 같은 동사 형태 )")]),t._v(" "),a("li",[a("strong",[a("span",{staticStyle:{color:"rgb(84, 141, 212)"}},[t._v("Constructor")])]),t._v(" - 인스턴스 생성 순간에 호출 실행되는 메서드입니다.")]),t._v(" "),a("li",[a("strong",[a("span",{staticStyle:{color:"rgb(84, 141, 212)"}},[t._v("Inheritance")])]),t._v(" - Class는 다른 Class로 부터 속성들을 상속받을 수 있습니다. (Super Class ⇒ Sub Class)")]),t._v(" "),a("li",[a("strong",[a("span",{staticStyle:{color:"rgb(84, 141, 212)"}},[t._v("Encapsulation")])]),t._v(" - Class는 해당 객체의 속성, 메서드 만 정의할 수 있습니다. (외부 접근 불가)")]),t._v(" "),a("li",[a("strong",[a("span",{staticStyle:{color:"rgb(84, 141, 212)"}},[t._v("Abstraction")])]),t._v(" - 복잡한 상속, 메서드, 객체 속성의 결합은 반드시 현실 모델을 시뮬레이션할 수 있어야 합니다.")]),t._v(" "),a("li",[a("strong",[a("span",{staticStyle:{color:"rgb(84, 141, 212)"}},[t._v("Polymorphism")])]),t._v(" - 다른 Class 들이 같은 메서드나 속성으로 정의될 수 있습니다.")])]),t._v(" "),a("h2",{attrs:{id:"객체-지향-javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#객체-지향-javascript","aria-hidden":"true"}},[t._v("#")]),t._v(" 객체 지향 JavaScript")]),t._v(" "),a("p",[t._v("비록 다른 객체지향적인 언어들 과의 차이점에 대한 논쟁들이 있긴 하지만,\nJavaScript는 강력한 객체지향 프로그래밍 능력들을 지니고 있습니다.")]),t._v(" "),a("base-img",{staticStyle:{"max-width":"137px","margin-left":"0"},attrs:{src:"OOP-in-JS.png"}}),t._v(" "),a("br"),t._v(" "),a("h3",{attrs:{id:"프로토타입기반-프로그래밍-prototype-based-programming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#프로토타입기반-프로그래밍-prototype-based-programming","aria-hidden":"true"}},[t._v("#")]),t._v(" 프로토타입기반 프로그래밍(Prototype-based programming)")]),t._v(" "),a("p",[t._v("프로토타입 기반 프로그래밍은 클래스가 존재하지 않는 객체지향 프로그래밍의 한가지 스타일로,\n동작 재사용(behavior reuse, 클래스기반 언어에서는 상속이라고함)은 프로토타입으로서\n존재하는 객체를 데코레이팅 하는 과정을 통해 수행됩니다.")]),t._v(" "),a("p",[t._v("프로토타입 기반 언어의 원형적인 예는 'Self'라는 프로그래밍 언어입니다. 그러나 클래스가 없는\n프로그래밍 스타일이 최근 인기를 얻으며 성장하였고, 대표적인 언어로 JavaScript가 있습니다.")]),t._v(" "),a("base-img",{staticStyle:{"max-width":"389px","margin-left":"0"},attrs:{src:"JS_prototype.png"}}),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"참고"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#참고","aria-hidden":"true"}},[t._v("#")]),t._v(" 참고")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://namu.wiki/w/%EA%B0%9D%EC%B2%B4%20%EC%A7%80%ED%96%A5%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D",target:"_blank",rel:"noopener noreferrer"}},[t._v("객체 지향 프로그래밍"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/ko/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript",target:"_blank",rel:"noopener noreferrer"}},[t._v("객체 지향 자바스크립트"),a("OutboundLink")],1)])])],1)},[],!1,null,null,null);r.default=e.exports}}]);