(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{272:function(r,n,e){"use strict";e.r(n);var v=e(5),t=Object(v.a)({},function(){var r=this,n=r.$createElement,e=r._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"박스-모델"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#박스-모델","aria-hidden":"true"}},[r._v("#")]),r._v(" 박스 모델")]),r._v(" "),e("p",[r._v("CSS 박스 모델에 대한 이해와 "),e("code",[r._v("margin")]),r._v(", "),e("code",[r._v("border")]),r._v(", "),e("code",[r._v("padding")]),r._v(" 등 박스를 구성하는 속성과\n"),e("code",[r._v("width")]),r._v(", "),e("code",[r._v("height")]),r._v(" 와 같은 수치 속성을 사용해 박스의 크기를 설정하는 방법을 학습해봅시다.\n영상 강의는 총 3편입니다. 순서대로 시청해주시길 바랍니다.")]),r._v(" "),e("ol",[e("li",[e("code",[r._v("block")]),r._v(" vs "),e("code",[r._v("inline")]),r._v(" vs "),e("code",[r._v("inline-block")]),r._v(" 요소간 특성에 대한 이해")]),r._v(" "),e("li",[e("code",[r._v("margin")]),r._v(" vs "),e("code",[r._v("border")]),r._v(" vs "),e("code",[r._v("padding")]),r._v(" vs "),e("code",[r._v("content")]),r._v(" 박스 간 특성에 대한 이해")]),r._v(" "),e("li",[e("code",[r._v("dimension")]),r._v(" & "),e("code",[r._v("box-sizing")]),r._v(" & "),e("code",[r._v("overflow")]),r._v(" 속성 사용에 대한 이해")])]),r._v(" "),e("br"),r._v(" "),e("h2",{attrs:{id:"영상-강의"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#영상-강의","aria-hidden":"true"}},[r._v("#")]),r._v(" 영상 강의")]),r._v(" "),e("p",[r._v("PLAY 버튼을 눌러 영상 강의를 시청합니다.")]),r._v(" "),e("blockquote",[e("p",[r._v("Lecture 1 → block vs inline vs inline-block 요소간 특성에 대한 이해")])]),r._v(" "),e("wistia",{attrs:{source:"c951xc159z"}}),r._v(" "),e("blockquote",[e("p",[r._v("Lecture 2 → margin vs border vs padding vs content 박스 간 특성에 대한 이해")])]),r._v(" "),e("wistia",{attrs:{source:"lvfdue2s5y"}}),r._v(" "),e("blockquote",[e("p",[r._v("Lecture 3 → dimension & box-sizing & overflow 속성 사용에 대한 이해")])]),r._v(" "),e("wistia",{attrs:{source:"scb9wh8zpi"}}),r._v(" "),e("br"),r._v(" "),e("h2",{attrs:{id:"실습-자료"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#실습-자료","aria-hidden":"true"}},[r._v("#")]),r._v(" 실습 자료")]),r._v(" "),e("p",[r._v("링크 텍스트를 클릭하면 실습 자료를 다운로드 받을 수 있습니다.")]),r._v(" "),e("base-download",{attrs:{href:"css-box-model.zip"}},[r._v("css-box-model.zip")]),r._v(" "),e("br"),r._v(" "),e("h2",{attrs:{id:"참고"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#참고","aria-hidden":"true"}},[r._v("#")]),r._v(" 참고")]),r._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Box_model",target:"_blank",rel:"noopener noreferrer"}},[r._v("CSS 박스 모델"),e("OutboundLink")],1)]),r._v(" "),e("li",[e("a",{attrs:{href:"https://developer.mozilla.org/ko/docs/Learn/CSS/Styling_boxes",target:"_blank",rel:"noopener noreferrer"}},[r._v("CSS 박스 스타일링"),e("OutboundLink")],1)]),r._v(" "),e("li",[e("a",{attrs:{href:"http://ko.learnlayout.com/box-model.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("CSS 레이아웃을 배웁시다 - box model"),e("OutboundLink")],1)])]),r._v(" "),e("br"),r._v(" "),e("h2",{attrs:{id:"q-a"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#q-a","aria-hidden":"true"}},[r._v("#")]),r._v(" Q & A")]),r._v(" "),e("p",[r._v("수강생과 주고 받은 질문/답변 입니다. 참고하세요.")]),r._v(" "),e("base-question-answer",{attrs:{order:"1"}},[e("div",{attrs:{slot:"q"},slot:"q"},[e("p",[r._v("#2번째 영상, 6분 44초 .demo 요소에 line-height 값을 100px(height 값과 동일) 로 줄때 위아래로 양분하기 때문이라고 하신 것\n      100px 일 경우 글자정가운데를 중심으로 위 50 아래50 이 되기 때문에 글자가 가운데 오는 것 맞나요?")])]),r._v(" "),e("div",{attrs:{slot:"a"},slot:"a"},[e("p",[r._v("쉽게 생각하면 양분되는 공간은 아래 공식에 따른다고 보시면 되요.\n"),e("br"),r._v(" "),e("br"),r._v(" "),e("code",[r._v("공간 = ( 행간(line-height) - 글자크기(font-size) ) ÷ 2")]),r._v(" "),e("br"),r._v(" "),e("br"),r._v("\n만약 100px 만큼 행간 높이가 설정되었고, 글자 크기가 24px 이라면?"),e("br"),r._v("\n아래 공식에 따라 결과 값인 38px 만큼 남은 공간을 양분하게 됩니다. ^^\n"),e("br"),r._v(" "),e("br"),r._v(" "),e("code",[r._v("공간 = ( 100 - 24 ) ÷ 2 = 38")])])])]),r._v(" "),e("base-question-answer",{attrs:{order:"2"}},[e("div",{attrs:{slot:"q"},slot:"q"},[e("p",[r._v("block과 inline-block 차이를 잘 모르겠습니다..."),e("br"),e("br"),r._v("\ninline block이 inline처럼 렌더링된다고는 하셨는데,"),e("br"),r._v("\n겉으로 보기에도 영역 차지하는것도 유사하다보니"),e("br"),r._v(" 굳이 inline block을 쓰는 이유가 있나요?")])]),r._v(" "),e("div",{attrs:{slot:"a"},slot:"a"},[e("p",[r._v("질문주신 Block, Inline, Inline Block의 차이점에 대해 기술해봅니다.\n"),e("br"),r._v(" "),e("br"),r._v(" "),e("b",[r._v("block 요소")]),r._v(" "),e("br"),r._v(" "),e("br"),r._v("\n기본적으로 width 값이 auto로 적용되어 자신을 포함하는 부모 영역의 너비만큼 늘어납니다.\n그러므로 마크업 상 나중에 작성된 다음 형제 요소는 해당 요소의 아래에 위치합니다.\n"),e("br"),r._v(" "),e("br"),r._v(" "),e("b",[r._v("inline 요소")]),r._v(" "),e("br"),r._v(" "),e("br"),r._v("\n자신이 포함하는 콘텐츠(예: 텍스트) 만큼만 너비를 가질 수 있습니다.\n사용자가 임의로 width 속성을 부여해도 반영되지 않습니다. 그러므로\n마크업 상 다음 형제 요소는 기본 흐름 상에서 오른쪽 옆에 붙습니다.\n"),e("br"),r._v(" "),e("br"),r._v(" "),e("b",[r._v("inline block 요소")]),r._v(" "),e("br"),r._v(" "),e("br"),r._v("\n기본적으로 자신이 포함하는 콘텐츠 만큼만 너비를 가지지만 (inline 요소처럼)\n사용자가 임의로 width 속성을 부여해 너비를 설정할 수 있습니다. 이 점이\ninline 요소와의 차이점입니다.\n어떤 경우에 사용하면 좋을까 질문 주셨는데 예를 들어 나란히 배치해야 하는\n상황에서 각 요소에 width 속성을 적용해야 하는 상황이라고 생각해봅시다.\n"),e("br"),r._v(" "),e("br"),r._v("\n간단한 예로 수평 내비게이션이 될 수 있겠네요. 물론 a 요소만 나열해도 수평 배치\n되지만, width 속성은 적용되지 않습니다. a 요소는 기본적으로 inline 이니까요.\n하지만 a 요소에 inline-block을 설정하면 block 설정과 달리 수평 배치를 유지한\n상태에서 width 속성을 부여해 동일한 너비만큼 아이템들을 설정할 수 있습니다.\n"),e("br"),r._v(" "),e("br"),r._v("\n그림으로 설명하면 아래와 같이 너비 폭이 다른 a 요소를\n"),e("br"),r._v(" "),e("br"),r._v("\n[프론트엔드]  [파이썬]  [장고]  [프레임워크]\n"),e("br"),r._v(" "),e("br"),r._v("\n같은 너비의 폭을 가진 a 요소들로 만들 수 있습니다. ^ㅡ^\n"),e("br"),r._v(" "),e("br"),r._v("\n[프론트엔드]  [   파이썬   ]  [    장고    ]  [프레임워크]")])])]),r._v(" "),e("base-question-answer",{attrs:{order:"3"}},[e("div",{attrs:{slot:"q"},slot:"q"},[e("p",[r._v("block 요소를 여러개 나열해주셨는데요.\n저것들이 전부 블록 박스인가요?"),e("br"),r._v("\n아니면 블록박스, 인라인박스, 인라인블록 박스를  설정하는 것은\ndisplay: value; 인건가요?\n"),e("br"),r._v(" "),e("br"),r._v("\n그리고\n속성:값 에서 값에 px를 붙일때도 안붙일때가 있던데 차이가 있나요?")])]),r._v(" "),e("div",{attrs:{slot:"a"},slot:"a"},[e("p",[r._v("\nHTML 요소를 화면에 그려내는 행위를 렌더링(Rendering)이라고 합니다.\nHTML 요소는 요소일 뿐, 화면 상 그려지는 것과 관련이 없습니다.\n정작 관련이 있는 것은 CSS 입니다.\n"),e("br"),r._v(" "),e("br"),r._v("\nHTML 요소를 사용하면 strong 요소는 두껍게, address 요소는 기울여서 표현 되죠.\n사실 이것은 모두 웹 브라우저의 기본 스타일인 useragent style을 통해 브라우저 화면에\n그려지는 것입니다. 이를 사용자가 CSS를 작성하여 스타일을 변경할 수 있는 것이\n원리입니다.\n"),e("br"),r._v(" "),e("br"),r._v("\nHTML 요소가 블록 또는 인라인 또는 인라인 블록 처럼 화면에 그려지는 것은 모두\nCSS의 display 속성에 따라 처리 결정 됩니다. 그렇기에 블록 요소인 div를 인라인\n요소처럼 화면에 그려낼 수 있는 것이죠.\n"),e("br"),r._v(" "),e("br"),r._v("\nCSS 속성에 px 값이 안 붙는 경우는 숫자 0 이거나, 정수를 사용해야 하는 경우 입니다.\n예를 들어 z-index 같은 속성은 양의 정수, 0, 음의 정수를 사용합니다. 이처럼 단위를\n사용하지 않아야 하는 속성 외에는 모두 속성 값에 단위를 붙여야 합니다.")])])])],1)},[],!1,null,null,null);n.default=t.exports}}]);